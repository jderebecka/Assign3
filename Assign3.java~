/*
Authors:  Andrew Payne, ACE18AP
          Julia Derebecka, ACA18JD
*/
import ShefRobot.*;

public class Assign3 {


    public static Robot myRobot = new Robot("dia-lego-e5");

    public static ColorSensor sensor =
      myRobot.getColorSensor(Sensor.Port.S1);
    public static GyroSensor angle =
      myRobot.getGyroSensor(Sensor.Port.S2);
    public static Motor leftMotor =
      myRobot.getLargeMotor(Motor.Port.A);
    public static Motor rightMotor =
      myRobot.getLargeMotor(Motor.Port.D);
    public static Motor grapple =
      myRobot.getMediumMotor(Motor.Port.C);
    public static Speaker mySpeaker = myRobot.getSpeaker();

//used in the functions to set as true once ball is picked up, so same
//function can be used for return trip
    public static boolean ball = false;
//default values for speed and wait times
    final static int SPEED = 100;
    final static int WAIT = 40;

    public static void forward (int speed, int wait) {
      leftMotor.setSpeed(speed);
      rightMotor.setSpeed(speed);
      leftMotor.forward();
      rightMotor.forward();
      myRobot.sleep(wait);
    }

    public static void backward (int speed, int wait) {
      leftMotor.setSpeed(speed);
      rightMotor.setSpeed(speed);
      leftMotor.backward();
      rightMotor.backward();
      myRobot.sleep(wait);
    }

    public static void stop () {
      leftMotor.stop();
      rightMotor.stop();
    }

    public static void leftTurn (int speed, int wait) {
      leftMotor.setSpeed(0); //set at 0 so only right wheel turns
      leftMotor.forward();
      rightMotor.setSpeed(speed);
      rightMotor.forward();
      myRobot.sleep(wait);
    }

    public static void rightTurn (int speed, int wait) {
      rightMotor.setSpeed(0); //set at 0 so only left wheel turns
      rightMotor.forward();
      leftMotor.setSpeed(speed);
      leftMotor.forward();
      myRobot.sleep(wait);
    }

    public static void pivotRight (int speed, int wait) {
      rightMotor.setSpeed(speed);
      rightMotor.backward();
      leftMotor.setSpeed(speed);
      leftMotor.forward();
      myRobot.sleep(wait);
    }

    public static void pivotLeft (int speed, int wait) {
      rightMotor.setSpeed(speed);
      rightMotor.forward();
      leftMotor.setSpeed(speed);
      leftMotor.backward();
      myRobot.sleep(wait);
    }

    public static void rotateLeft (int rotation) {
      angle.reset();
      angle.getAngle();
      leftMotor.setSpeed(SPEED*2); //rotates at x2 speed to ensure over line
      leftMotor.rotate(rotation);
    }

    public static void rotateRight (int rotation) {
      angle.reset();
      angle.getAngle();
      rightMotor.setSpeed(SPEED*2); //rotates at x2 speed to ensure over line
      rightMotor.rotate(rotation);
    }

    public static void lineCheck (String find) {
//ball set at false is for initial route, when true values reversed for
//reversed route

      if (ball==false) {
        rotateLeft(-70);
      } else if (ball==true) {
        rotateRight(-70);
      }
      do {
        if (ball==false) {
          pivotRight(75,20);
        } else if (ball==true) {
          pivotLeft(75,20);
        }
      } while (String.valueOf(sensor.getColor()) != find);
    }

    public static void openGrab (int speed, int wait) {
      grapple.setSpeed(speed);
      grapple.forward();
      myRobot.sleep(wait);
      grapple.stop();
    }

    public static void closeGrab (int speed, int wait) {
      grapple.setSpeed(speed);
      grapple.backward();
      myRobot.sleep(wait);
      grapple.stop();
    }

    public static void playSound (int freq, int duration) {
      mySpeaker.playTone(freq,duration);
    }

    public static void party () {
//Rocky Theme tune!
          playSound(330,160);

          playSound(392,320);

          playSound(440,1280);
          pivotRight(1500,1000);
          stop();
          playSound(440,160);

          playSound(494,320);

          playSound(330,1280);
          pivotLeft(1500,1000);
          stop();
          playSound(330,160);

          playSound(392,320);

          playSound(440,1280);
          pivotRight(1500,1000);
          stop();
          playSound(440,160);

          playSound(494,320);

          playSound(330,1280);
          pivotLeft(1500,1000);
          stop();
          playSound(294,160);

          playSound(262,160);

          playSound(294,320);

          playSound(262,160);

          playSound(294,160);

          playSound(330,640);
          pivotRight(1500,1000);
          stop();
          playSound(262,160);

          playSound(262,160);

          playSound(247,320);

          playSound(247,160);

          playSound(220,320);

          playSound(220,160);

          playSound(196,320);

          playSound(349,160);

          playSound(330,1280);

          playSound(659,1280);
        }

//-------------------------------------------------------------------------//
	  public static void main(String[] args) {
//Start position - get to black line
      do {
        forward(SPEED,WAIT);
      } while (String.valueOf(sensor.getColor()) != "BLACK");

//reached black line, rotate to start following line
      rotateLeft(-90);

//move along line to red circle, then close pincers
      do {
        lineCheck("BLACK");
        do {
          forward(SPEED,WAIT);
        } while (String.valueOf(sensor.getColor()) == "BLACK");
      } while (String.valueOf(sensor.getColor()) != "RED");

//stops at red and plays sound to indicate reached red circle
      stop();
      playSound(1000,100);
      playSound(1100,100);
      playSound(1500,500);

      closeGrab(500,1800);
      ball = true;
      rotateLeft(180);

//move along line to yellow circle, then open pincers
      do {
        lineCheck("BLACK");
        do {
          forward(SPEED,WAIT);
        } while (String.valueOf(sensor.getColor()) == "BLACK");
      } while (String.valueOf(sensor.getColor()) != "YELLOW");

//stops at yellow and plays sound to indicate yellow circle reached
      playSound(400,1000);
      openGrab(500,1800);

//celebrate
      party();

		myRobot.close();
	}
}
